"""
Application factory e setup
Arquitetura em camadas com Dependency Injection
Inicializa pool de conex√µes PostgreSQL para QueryRepository
"""
import os
import logging
import asyncpg
from fastapi import FastAPI
from contextlib import asynccontextmanager
from dotenv import load_dotenv
from langchain_google_genai import ChatGoogleGenerativeAI

# Camadas
from llm_api.repositories import QueryRepository
from llm_api.repositories.schema import CREATE_QUERIES_TABLE
from llm_api.services import QueryService
from llm_api.controllers import QueryController, create_router
from llm_api.schemas import FiltrosBusca

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Carrega vari√°veis de ambiente
load_dotenv()

if not os.getenv("GOOGLE_API_KEY"):
    raise EnvironmentError("Vari√°vel de ambiente GOOGLE_API_KEY n√£o definida.")

# Vari√°veis globais
db_pool = None
# Exposto para testes (permite patch("main.structured_llm"))
structured_llm = None


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Gerencia o ciclo de vida da aplica√ß√£o:
    - Cria pool de conex√µes ao iniciar
    - Cria schema do banco se necess√°rio
    - Fecha pool ao desligar
    """
    global db_pool
    
    # STARTUP
    logger.info("üì¶ Inicializando pool de conex√µes PostgreSQL...")
    db_config = {
        "host": os.getenv("DB_HOST", "db"),
        "port": int(os.getenv("DB_PORT", 5432)),
        "database": os.getenv("DB_NAME", "ong_db"),
        "user": os.getenv("DB_USER", "user"),
        "password": os.getenv("DB_PASSWORD", "password"),
    }
    
    try:
        db_pool = await asyncpg.create_pool(
            **db_config,
            min_size=2,
            max_size=10,
            command_timeout=60,
        )
        logger.info("‚úì Pool de conex√µes criado com sucesso")

        # Criar schema do banco (tabelas)
        async with db_pool.acquire() as conn:
            await conn.execute(CREATE_QUERIES_TABLE)
            logger.info("‚úì Schema do banco verificado/criado")

    except Exception as e:
        # Em ambiente de testes/unit, permitir prosseguir em modo in-memory
        logger.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel conectar ao banco, prosseguindo em modo in-memory: {e}")
        db_pool = None
    
    yield  # Aplica√ß√£o roda aqui
    
    # SHUTDOWN
    if db_pool:
        await db_pool.close()
        logger.info("üõë Pool de conex√µes fechado")


def create_app() -> FastAPI:
    """
    Application Factory Pattern
    Cria a aplica√ß√£o com todas as depend√™ncias injetadas
    """
    app = FastAPI(
        title="LLM API de Filtros",
        version="0.4.0-sql",
        lifespan=lifespan,
    )

    # ========== SETUP DEPEND√äNCIAS ==========

    # 1. LLM Model (Dependency)
    llm = ChatGoogleGenerativeAI(model="gemini-1.5-flash-latest")
    logger.info("‚úì LLM Model inicializado")
    global structured_llm
    structured_llm = llm.with_structured_output(FiltrosBusca)

    # 2. Repository (Dependency) - Ser√° recriado com pool na startup
    # Usar um placeholder que ser√° substitu√≠do
    def get_repository():
        """Factory para obter repository com pool atual (ou in-memory em testes)"""
        return QueryRepository(db_pool=db_pool)
    
    # 3. Service (Dependency)
    def get_service():
        repository = get_repository()
        # Provider aponta para vari√°vel de m√≥dulo para permitir patch din√¢mico nos testes
        return QueryService(
            llm_model=llm,
            repository=repository,
            structured_llm_provider=lambda: structured_llm,
        )
    
    # 4. Controller (Dependency)
    def get_controller():
        service = get_service()
        return QueryController(service=service)

    # ========== REGISTRAR ROTAS (imediato para suportar testes sem DB) ==========
    controller = get_controller()
    router = create_router(controller)
    app.include_router(router)
    logger.info("‚úì Rotas registradas (in-memory quando DB indispon√≠vel)")

    @app.on_event("shutdown")
    async def shutdown_event():
        logger.info("üõë Aplica√ß√£o finalizada")

    return app


# Inst√¢ncia global da aplica√ß√£o
app = create_app()

# Health root (compat√≠vel com testes que usam /health sem prefixo)
@app.get("/health")
async def root_health():
    return {"status": "ok"}
